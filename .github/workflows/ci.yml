name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  rust:
    name: Rust
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            packages/rust/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        working-directory: ./packages/rust
        run: cargo fmt -- --check

      - name: Lint with clippy
        working-directory: ./packages/rust
        run: cargo clippy -- -D warnings

      - name: Run tests
        working-directory: ./packages/rust
        run: cargo test

      - name: Build local example
        working-directory: ./packages/rust/examples/local
        run: cargo build

      - name: Build fetch example
        working-directory: ./packages/rust/examples/fetch
        run: cargo build

  typescript:
    name: TypeScript
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        working-directory: ./packages/typescript
        run: npm install

      - name: Lint
        working-directory: ./packages/typescript
        run: npm run lint

      - name: Run tests
        working-directory: ./packages/typescript
        run: npm test

      - name: Build
        working-directory: ./packages/typescript
        run: npm run build

      - name: Check examples
        working-directory: ./packages/typescript
        run: |
          set -e
          for dir in examples/*; do
            if [ -d "$dir" ]; then
              cd "$dir"
              npm install
              cd - > /dev/null
            fi
          done
          for dir in examples/*; do
            if [ -d "$dir" ]; then
              echo "=== Checking example in $dir ==="
              cd "$dir"
              if [ -f "index.ts" ]; then
                echo "Static check for TypeScript in $dir"
                ../../node_modules/.bin/tsc --noEmit || exit 1
              fi
              npm start
              cd - > /dev/null
            fi
          done

  golang:
    name: Golang
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Format check
        working-directory: ./packages/golang
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go files need formatting:"
            gofmt -l .
            exit 1
          fi

      - name: Install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

      - name: Run linter
        working-directory: ./packages/golang
        run: $(go env GOPATH)/bin/golangci-lint run ./...

      - name: Run tests
        working-directory: ./packages/golang
        run: go test ./...

      - name: Build local example
        working-directory: ./packages/golang/examples/local
        run: go build

      - name: Build fetch example
        working-directory: ./packages/golang/examples/fetch
        run: go build
